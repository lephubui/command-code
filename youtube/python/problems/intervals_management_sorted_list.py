# Problem: Intervals Management with Sorted List
# You are given a list of intervals and a series of queries to manage these intervals.
# Each query can be one of two types:
# 1. Check if a given interval overlaps with any of the existing intervals (operation type 0).
# 2. Remove a specified interval from the list (operation type 1).
# The function should return a list of results for each query:
# - For operation type 0, return True if the interval overlaps with any existing interval, otherwise return False.
# - For operation type 1, return the count of remaining intervals after the removal.
# Constraints:
# The number of intervals, n, satisfies (1≤n≤100000)
# The number of queries, k, satisfies (1≤k≤100000)
# For any interval, the boundaries a and b satisfy (−10^6≤a<b≤10^6)
# For any query, the boundaries a and b satisfy (−10^6≤a<b≤10^6)

from sortedcontainers import SortedList

def solution(intervals, queries):
    result = []
    intervals_list = SortedList(intervals)
    
    for query in queries:
        list_subquery = [query[1], query[2]]
        if query[0] == 0:
            idx = intervals_list.bisect_left([query[2] + 1, -float('inf')])
            if idx > 0 and intervals_list[idx-1][1] >= query[1]:
                result.append(True)
            else:
                result.append(False)
        elif query[0] == 1:
            intervals_list.discard(list_subquery)
            result.append(len(intervals_list))
    
    return result

if __name__ == "__main__":
    intervals = [[-1000000, 1000000]]
    queries = [[0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000],           
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], [0, -1000000, 1000000], 
               [0, -1000000, 1000000], [0, -1000000, 1000000]]
    print(solution(intervals, queries))  # Expected output: [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]

    intervals = [[978997, 988808], [410564, 640601], [424336, 871171], [259220, 405561], [238697, 455176], [680561, 834952], [771481, 906586], [378015, 979187], 
                 [-147957, 589443], [-817478, -438150], [676082, 987382], [-662681, -16826], [761118, 765484], [-565015, -403833], [245797, 433592], [186831, 874622], 
                 [-689595, -278625], [292814, 997527], [-852486, -215673], [-278905, 297926], [465501, 779101], [79473, 778201], [153860, 705495], [-80867, 610323], 
                 [-344276, -21230], [-522463, 427032], [-61663, 723983], [-561318, -330611], [-319207, 719017], [373965, 474192], [585108, 642280], [101092, 536729], 
                 [86630, 597909], [-215425, -14603], [-957997, 474040], [-919153, 13166], [-370140, 824617], [45113, 957753], [-881395, -259656], [-803134, 332349], 
                 [-87524, -62797], [812658, 908179], [-696945, 853677], [-525938, -46303], [958597, 983905], [368002, 834321], [-284282, -34988], [-486092, 398646], 
                 [-930963, 682148], [-250563, -112632], [583184, 644524], [560788, 732705], [995465, 997604], [-20023, -964], [-306696, -10976], [-34717, 798533], 
                 [-886429, 872634], [-812070, 338066], [818989, 894734], [-188034, 367539], [-334125, -94498], [303745, 349015], [-803781, -45420], [347143, 438437], 
                 [-786502, -431339], [583310, 648054], [452711, 877120], [-381442, -163353], [-549459, -481808], [331276, 367903], [130504, 621507], [231930, 869333], 
                 [-261480, 914254], [-849618, -119501], [534663, 741739], [963878, 967268], [-374758, 673032], [-948230, 838093], [-831056, -699426], [-88470, 403893], 
                 [157837, 188829], [324174, 784721], [-180775, 871547], [96749, 693175], [754932, 996645], [957758, 961247], [100389, 623417], [-135868, -86317], [-907251, 83166], 
                 [-418416, -72380], [-832214, -8149], [-824641, 891171], [-634483, -182146], [-823138, 463313], [281186, 342068], [78277, 200487], [441480, 505128], [194752, 867235], [709729, 816334], [85439, 490786]]
    queries = [[1, 466129, 790112], [1, -172415, 63657], [0, -843005, 791024], [0, 277306, 630404], [1, 45933, 772074], [0, -793225, -484037], [1, -658221, -450100], [0, 327953, 563513], [0, -376037, 999669], [1, 611902, 974083], [1, -189552, 713620], [1, 887246, 900092], [1, -51437, 229010], [1, -238073, 217371], [1, -640037, 428175], [0, 704513, 750816], [0, 544865, 879573], [1, -32259, 257806], [1, -131129, 356188], [1, -856300, 982531], [1, 120683, 377645], [1, -443939, -76184], [1, 432519, 483238], [1, -256288, 868826], [1, -987904, 902666], [0, 79135, 83300], [1, -3410, 613077], [0, 393561, 721358], [1, -287172, 145030], [0, -119676, 594239], [1, 238867, 667897], [0, -498730, 218660], [1, -294957, -92477], [0, -637097, 558121], [0, 753444, 933144], [0, -682525, 357570], [1, 448902, 471854], [0, 439453, 801723], [0, -568218, 678016], [0, 555439, 977942], [0, -929275, 412811], [1, 226675, 903964], [0, -259775, 427720], [1, -143319, 672877], [1, -906980, -686157], [0, -950805, 600149], [0, 252185, 308600], [1, -31532, 692626], [0, 683491, 965653], [0, -341094, 653016], [1, 8538, 673787], [0, -465117, -166327], [1, 234447, 862768], [0, 947235, 987752], [0, 462799, 681071], [1, 14282, 35595], [1, -191572, 147492], [0, -424033, -350502], [1, 788192, 802751], [0, 967857, 987281], [1, 858046, 958878], [0, -665891, 707979], [1, 507572, 535068], [0, 411539, 923249], [0, -559376, 527421], [0, -320291, -176761], [0, -953528, -497113], [0, -857499, 637017], [1, 7909, 843676], [1, 774232, 783300], [1, -187880, 771340], [0, -804013, 712889], [0, -887684, 537259], [1, -97798, 554864], [0, -895650, -364039], [0, -883610, -571090], [0, -113221, 183481], [0, -964870, 848342], [0, 542559, 855456], [1, 756660, 774207], [1, -337709, 471292], [0, -116595, 367138], [0, 514567, 630322], [0, 233295, 733629], [0, 278863, 927923], [1, 606280, 860962], [0, 454314, 810182], [1, -508331, 504726], [0, -675513, -598039], [1, -142165, 789757], [1, -341367, 892319], [1, -457239, -25019], [0, -452849, 890865], [0, -745590, -21263], [1, -965858, 911861], [1, 643204, 651467], [1, -265493, -255170], [0, 869457, 930278], [1, -832731, 889367], [1, 566621, 949394]]
    print(solution(intervals, queries))  # Expected output based on the operations performed on the intervals and queries provided  